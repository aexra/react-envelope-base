import React from 'react';
import styles from './AlgLab5.module.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const InitialDataVisualization = ({ initialData, processorRanges }) => (
    <div className={styles.section}>
        <h3>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>

        <div className={styles.subSection}>
            <h4>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h4>
            <div className={styles.tasksGrid}>
                {initialData.tasks.map(task => (
                    <div key={task.id} className={styles.taskCard}>
                        <span>–ó–∞–¥–∞—á–∞ {task.id}</span>
                        <span>{task.time} –º—Å</span>
                    </div>
                ))}
            </div>
            <p>–û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {initialData.totalLoad} –º—Å</p>
            <p>–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: ~{initialData.idealLoad.toFixed(1)} –º—Å</p>
        </div>

        <div className={styles.subSection}>
            <h4>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</h4>
            <div className={styles.rangesGrid}>
                {processorRanges.map(range => (
                    <div key={range.processor} className={styles.rangeCard}>
                        <h5>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä {range.processor}</h5>
                        <p>–î–µ—Å—è—Ç–∏—á–Ω—ã–π: [{range.min}, {range.max}]</p>
                        <p>–î–≤–æ–∏—á–Ω—ã–π: [{range.binaryRange.min}, {range.binaryRange.max}]</p>
                    </div>
                ))}
            </div>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–æ–±–∏
const IndividualVisualization = ({ individual, showDetails }) => (
    <div className={styles.individual}>
        <div className={styles.individualHeader}>
            <h4>{individual.name}</h4>
            <span className={styles.fitnessBadge}>{individual.fitness} –º—Å</span>
        </div>

        {showDetails && (
            <>
                <div className={styles.genotype}>
                    <h5>–ì–µ–Ω–æ—Ç–∏–ø:</h5>
                    <div className={styles.genes}>
                        {individual.genotype.map((gene, idx) => (
                            <div key={idx} className={styles.gene}>
                                <span>–ó–∞–¥–∞—á–∞ {idx + 1}:</span>
                                <span>{gene} ({gene.toString(2).padStart(8, '0')})</span>
                            </div>
                        ))}
                    </div>
                </div>

                <div className={styles.processors}>
                    <h5>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á:</h5>
                    {individual.processors.map((tasks, idx) => (
                        <div key={idx} className={styles.processor}>
                            <div className={styles.processorHeader}>
                                <span>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä {idx + 1}</span>
                                <span>{individual.processorLoads[idx]} –º—Å</span>
                            </div>
                            <div className={styles.processorTasks}>
                                {tasks.map(task => (
                                    <span key={task.id} className={styles.task}>
                                        {task.id}:{task.time}–º—Å
                                    </span>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </>
        )}
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞
const CrossoverEventVisualization = ({ event }) => (
    <div className={styles.event}>
        <h4>üîÄ –ö—Ä–æ—Å—Å–æ–≤–µ—Ä –º–µ–∂–¥—É {event.parents[0].name} –∏ {event.parents[1].name}</h4>

        <div className={styles.parents}>
            {event.parents.map(parent => (
                <IndividualVisualization
                    key={parent.id}
                    individual={parent}
                    showDetails={false}
                />
            ))}
        </div>

        <div className={styles.crossoverDetails}>
            <p>–¢–æ—á–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞: {event.crossoverPoint}</p>
            <div className={styles.genotypeComparison}>
                <div>
                    <h5>–†–æ–¥–∏—Ç–µ–ª—å 1:</h5>
                    <code>{event.beforeGenotypes[0].join(', ')}</code>
                </div>
                <div>
                    <h5>–†–æ–¥–∏—Ç–µ–ª—å 2:</h5>
                    <code>{event.beforeGenotypes[1].join(', ')}</code>
                </div>
            </div>
            <div className={styles.arrow}>‚Üì</div>
            <div className={styles.genotypeComparison}>
                <div>
                    <h5>–ü–æ—Ç–æ–º–æ–∫ 1:</h5>
                    <code>{event.afterGenotypes[0].join(', ')}</code>
                </div>
                <div>
                    <h5>–ü–æ—Ç–æ–º–æ–∫ 2:</h5>
                    <code>{event.afterGenotypes[1].join(', ')}</code>
                </div>
            </div>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –º—É—Ç–∞—Ü–∏–∏
const MutationEventVisualization = ({ event }) => (
    <div className={styles.event}>
        <h4>üß¨ –ú—É—Ç–∞—Ü–∏—è –æ—Å–æ–±–∏ {event.individual.name}</h4>

        <div className={styles.mutationDetails}>
            <div className={styles.mutationGene}>
                <h5>–ò–∑–º–µ–Ω–µ–Ω –≥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {event.taskId}:</h5>
                <div className={styles.binaryChange}>
                    <code>{event.oldBinary}</code>
                    <span>‚Üí</span>
                    <code>{event.newBinary}</code>
                </div>
                <p>–ò–∑–º–µ–Ω–µ–Ω –±–∏—Ç {event.changedBit} (–∏–Ω–¥–µ–∫—Å —Å 0)</p>
                <p>–î–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {event.oldValue} ‚Üí {event.newValue}</p>
            </div>
        </div>
    </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
const GenerationVisualization = ({ generation }) => (
    <div className={styles.generation}>
        <div className={styles.generationHeader}>
            <h3>{generation.name}</h3>
            {generation.improvement && (
                <span className={styles.improvementBadge}>–£–ª—É—á—à–µ–Ω–∏–µ!</span>
            )}
        </div>

        <div className={styles.individualsGrid}>
            {generation.individuals.map(ind => (
                <IndividualVisualization
                    key={ind.id}
                    individual={ind}
                    showDetails={generation.index === 0}
                />
            ))}
        </div>

        {generation.crossoverEvents.map((event, idx) => (
            <CrossoverEventVisualization key={`crossover-${idx}`} event={event} />
        ))}

        {generation.mutationEvents.map((event, idx) => (
            <MutationEventVisualization key={`mutation-${idx}`} event={event} />
        ))}
    </div>
);

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
export const AlgorithmVisualization = ({ state, controls }) => {
    if (!state) return (
        <div className={styles.visualization}>
            <div className={styles.placeholder}>
                <p>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–†–µ—à–∏—Ç—å" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞</p>
            </div>
        </div>
    );

    return (
        <div className={styles.visualization}>
            <InitialDataVisualization
                initialData={state.initialData}
                processorRanges={calculateProcessorRanges(controls.processorsCount)}
            />

            <div className={styles.resultsSection}>
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h3>
                <div className={styles.summary}>
                    <div className={styles.bestSolution}>
                        <h4>–õ—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ: {state.bestIndividual.name}</h4>
                        <IndividualVisualization
                            individual={state.bestIndividual}
                            showDetails={true}
                        />
                    </div>
                    <div className={styles.algorithmStats}>
                        <p>–í—Å–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π: {state.totalGenerations}</p>
                        <p>–ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {state.stoppingReason}</p>
                        <p>–õ—É—á—à–∏–π —Ñ–∏—Ç–Ω–µ—Å: {state.bestIndividual.fitness} –º—Å</p>
                    </div>
                </div>
            </div>

            <div className={styles.generationsList}>
                <h3>–•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                {state.generations.map(gen => (
                    <GenerationVisualization key={gen.index} generation={gen} />
                ))}
            </div>
        </div>
    );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
function calculateProcessorRanges(processorsCount) {
    const rangeSize = Math.floor(256 / processorsCount);
    return Array.from({ length: processorsCount }, (_, i) => {
        const min = i * rangeSize;
        const max = (i + 1) * rangeSize - (i === processorsCount - 1 ? 0 : 1);
        return {
            processor: i + 1,
            min,
            max,
            binaryRange: {
                min: min.toString(2).padStart(8, '0'),
                max: max.toString(2).padStart(8, '0')
            }
        };
    });
}